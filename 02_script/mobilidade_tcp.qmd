---
title: "mobilidade_tcp"
format: html
editor: visual
---

# Análise de mobilidade de carreira de TCP

Nesse script analisaremos com base nos dados da PNAD contínua a mobilidade de carreira de pessoas em situação de desocupação para trabalho por conta próprio e emprego no setor privado. Os dados utilizados são provenientes da amostragem nos trimestres 03/2023 à 04/2024. Seguiremos a seguinte estrutura:

1.  Tratamento dos dados;
2.  Codificação das narrativas ou processos em sequências;
3.  Agregação de variáveis e análise descritiva.

Abaixo, as bibliotecas que serão utilizadas.

```{r}
#| warning: false

options(scipen = 999)

library(TraMineR)
library(tidyverse)
library(TraMineRextras)
library(FactoMineR)
library(questionr)
library(descriptio)
library(purrr)
library(stringr)
library(ggseqplot)
library(factoextra)
library(janitor)
library(patchwork)
library(grid)
library(scales)
library(RColorBrewer)
```

## 1. Tratamentos dos dados.

A seguir iremos carregar a base de dados.

```{r}
data_raiz <- vroom::vroom(
  "C:/Users/alefs/OneDrive/Documentos/GitHub/tcp/tcp_espriv_5trimestres_v4.csv",
                       progress = FALSE,
                       show_col_types = FALSE)
```

A seguir, criaremos a variável Trimestre_ano, selecionaremos apenas maiores de 14, filtraremos trabalhadores urbanos e desenvolveremos a variável ocupação para fins da análise.

```{r}

data <- data_raiz |> 
  mutate(Trimestre_Ano = paste(Trimestre, Ano, 
                                   sep = "-"),  .before = UF) |> 
  filter(V2009 >= 18 & V1022 == "Urbana")

data_1 <- data |> 
mutate(V4012_ajust = 
           case_when(
                V4012 == "Conta própria"  ~ "TCP",
                V4012 == "Empregado do setor privado" ~ "ESPriv",
                V4012 == "Trabalhador doméstico" ~ "TD",
                V4012 == "Empregado do setor público (inclusive empresas de economia mista)" ~ "ESPub",
                V4012 == "Militar do exército, da marinha, da aeronáutica, da polícia militar ou do corpo de bombeiros militar" ~ 
                  "ESPub",  
                V4012 == "Trabalhador familiar não remunerado" ~ "TFNR",
                V4012 == "Empregador" ~ "EMP"), 
         .after = Ano)
  
data_2 <- data_1 |> 
  mutate(
      ocupacao = 
        case_when(
                VD4001 == "Pessoas na força de trabalho" & 
                VD4002 == "Pessoas ocupadas" ~ 
                                  as.character(V4012_ajust),
                VD4001 == "Pessoas na força de trabalho" & 
                VD4002 == "Pessoas desocupadas" ~ "Desocupado",
                VD4001 == "Pessoas fora da força de trabalho" ~ 
                                  "PFT"), .after = V4012_ajust)
```

## 2. Codificação das narrativas ou processos em sequências.

Nesta etapa, os processos são codificados em sequências.

```{r}
data_long <- 
  data_2 |>
  select(id, V1016,ocupacao)

#Transformando a estrutura de dados para wide
data_wide <- data_long |> 
  pivot_wider(names_from = V1016, 
              values_from = ocupacao,
              values_fn = list)

# Colocando as colunas em ordem de entrevista e para caracteres
data_ordem <- data_wide |> 
  relocate(id,`1`, `2`, `3`, `4`, `5`) |>
  mutate(across(`1`:`5`, as.character)) |> 
    filter(if_all(2:6, ~ . != "NULL"))
```

Observe que isso resultou em uma amostra de 64.485 indivíduos que completaram as cinco entrevistas no período analisado.

## 3. Mobilidade de carreira.

A mobilidade de carreira analisada será com relação aos indivíduos que após permanecerem por pelo menos dois períodos subsequentes em situação de desocupação migraram para trabalho por conta própria ou emprego no setor privado permanecendo por pelo menos mais dois trimestres.

```{r}
data_mob_1 <- data_ordem  |> 
  mutate(id_seq = row_number()) |> 
  mutate(transicao = case_when(`1` == "Desocupado" &
                               `2` == "Desocupado" &
                                `3` == "TCP" &
                                 `4` == "TCP" ~ "Migrou para TCP",
                               `2` == "Desocupado" &
                               `3` == "Desocupado" &
                                `4` == "TCP" &
                                 `5` == "TCP" ~ "Migrou para TCP",
                               `1` == "Desocupado" &
                               `2` == "Desocupado" &
                                `3` == "ESPriv" &
                                 `4` == "ESPriv" ~ "Migrou para o setor privado",
                               `2` == "Desocupado" &
                               `3` == "Desocupado" &
                                `4` == "ESPriv" &
                                 `5` == "ESPriv" ~ "Migrou para o setor privado"),
         padrao = case_when(
      `1` == "Desocupado" & `2` == "Desocupado" &
      `3` == "TCP"        & `4` == "TCP"        ~ "padrao1",
      
      `2` == "Desocupado" & `3` == "Desocupado" &
      `4` == "TCP"        & `5` == "TCP"        ~ "padrao2",
      
      `1` == "Desocupado" & `2` == "Desocupado" &
      `3` == "ESPriv"     & `4` == "ESPriv"     ~ "padrao3",
      
      `2` == "Desocupado" & `3` == "Desocupado" &
      `4` == "ESPriv"     & `5` == "ESPriv"     ~ "padrao4")) |> 
  filter(!is.na(transicao))

data_3 <- data_mob_1 |> 
  select(id, padrao) |> 
  left_join(data_2, by = c("id" = "id"))
                               

data_mob_1 |> 
  count(transicao) |> 
  mutate(percentual = round(n / sum(n),2))


```

Observe que foram identificados 438 pessoas que satisfizeram as condições de mobilidade descritas.

## 4.Análise descritiva.

Primeiros, iremos agregar as variáveis que serão analisadas através do id.

```{r}


features <- 
  data_3 |> 
  filter(
    id %in% data_mob_1$id,
    case_when(
      padrao %in% c("padrao1", "padrao3") ~ V1016 == 2,
      padrao %in% c("padrao2" ,"padrao4")            ~ V1016 == 3,
      TRUE                                ~ TRUE  # mantém outras linhas
    )
  ) |> 
  select(id, V1023, V2009, V2007, VD3004,VD3005, V2010, V2005, UF, V4076,
         V40761, V40762, V40763)



```

A seguir iremos fazer os seguintes tratamentos.

-   Renomeação das variáveis;

-   Classificação da variável de escolaridade em Ensino Médio Completo e Ensino Médio Incompleto.

-   Classificação da variável raça em brancos e não brancos.

-   Classificação da variável de posição na família em chefe de família ou não chefe.

```{r}
features_1 <- features |> 
  rename(idade = V2009, genero = V2007) |> 
  mutate(ensino_medio = if_else(VD3004 %in% c("Médio completo ou equivalente", "Superior completo", "Superior incompleto ou equivalente"), "Ensino médio completo", "Ensino médio incompleto"),
         ensino_superior = if_else(VD3004 == "Superior completo", "Superior completo", "Sem superior completo"),
         anos_estudos = replace_na(as.numeric(substring(VD3005,1,2)),0),
         raça = if_else(V2010 == "Branca", "Branco", "Não branco"),
         posicao_familiar = if_else(V2005 == "Pessoa responsável pelo domicílio", "Responsável pelo domicílio", "Não responsável pelo domicílio")) |> 
  select(-V2005, -VD3005)
```

O tratamento a seguir está desagregado dos demais dada a sua maior complexidade. Realizaremos o cálculo do rendimento médio antes e depois da mobilidade, especificamente nos períodos analisados (que são 4 por indivíduo).

Como os 4 períodos analisados divergem entre os indivíduos, iremos classifica-los conforme seu padrão.

```{r}

data_padrao <- data_mob_1 |> 
  mutate(padrao = case_when(
      `1` == "Desocupado" & `2` == "Desocupado" &
      `3` == "TCP"        & `4` == "TCP"        ~ "padrao1",
      
      `2` == "Desocupado" & `3` == "Desocupado" &
      `4` == "TCP"        & `5` == "TCP"        ~ "padrao2",
      
      `1` == "Desocupado" & `2` == "Desocupado" &
      `3` == "ESPriv"     & `4` == "ESPriv"     ~ "padrao3",
      
      `2` == "Desocupado" & `3` == "Desocupado" &
      `4` == "ESPriv"     & `5` == "ESPriv"     ~ "padrao4")) |> 
  select(id, padrao)

renda <- data_2 |> 
  filter(id %in% data_padrao$id) |> 
  select(id,V1016 ,VD4016) |> 
  left_join(data_padrao, by = c("id" = "id"))

renda$VD4016[is.na(renda$VD4016)] <- 0

renda_wide <- renda |> 
  pivot_wider(names_from = V1016, values_from = VD4016)

renda_mobilidade <- renda_wide |> 
  mutate(
    renda_antes = case_when(
      padrao %in% c("padrao1", "padrao3") ~ (`1` + `2`) / 2,
      padrao %in% c("padrao2", "padrao4") ~ (`2` + `3`) / 2
    ),
    renda_depois = case_when(
      padrao %in% c("padrao1", "padrao3") ~ (`3` + `4`) / 2,
      padrao %in% c("padrao2", "padrao4") ~ (`4` + `5`) / 2
    )
  )
```

A seguir, iremos agregar a renda após a mobilidade na base de features. E por fim, juntaremos na base data_mob_1.

```{r}
features_2 <- renda_mobilidade |> 
  select(id, renda_depois) |> 
  left_join(features_1, by = c("id" = "id"))

data_final <- data_mob_1 |> 
  select(id, id_seq, transicao) |> 
  left_join(features_2, by = c("id" = "id")) |> 
  mutate(regiao = case_when(
    UF %in% c("Acre", "Amapá", "Amazonas", "Pará", "Rondônia", "Roraima", "Tocantins") ~ "Norte",
    UF %in% c("Alagoas", "Bahia", "Ceará", "Maranhão", "Paraíba", "Pernambuco", "Piauí", "Rio Grande do Norte", "Sergipe") ~ "Nordeste",
    UF %in% c("Distrito Federal", "Goiás", "Mato Grosso", "Mato Grosso do Sul") ~ "Centro-Oeste",
    UF %in% c("Espírito Santo", "Minas Gerais", "Rio de Janeiro", "São Paulo") ~ "Sudeste",
    UF %in% c("Paraná", "Rio Grande do Sul", "Santa Catarina") ~ "Sul",
    TRUE ~ NA_character_
  ))

#write.csv(data_final, "C:/Users/alefs/OneDrive/Documentos/GitHub/tcp/01_dados/data_mobilidade.csv")
```

A seguir, o tratamento do tempo de desemprego em meses.

```{r}
data_final_2 <- data_final |> 
  mutate(tempo_1 = case_when(V4076 == "Menos de 1 mês" ~ 1,
                             V4076 == "De 1 ano a menos de 2 anos" ~ 12,
                             TRUE ~ 0),
         tempo_2 = if_else(is.na(V40761), 0, V40761),
         tempo_3 = if_else(is.na(V40762), 0, V40762),
         tempo_4 = if_else(is.na(V40763),0, V40763*12),
         tempo_desemprego = tempo_1 + tempo_2 + tempo_3 + tempo_4) |>
  select(-tempo_1, -tempo_2, -tempo_3, -tempo_4,
         -V4076, - V40761, -V40762, -V40763)

write.csv(data_final_2, "C:/Users/alefs/OneDrive/Documentos/GitHub/tcp/01_dados/data_mobilidade_v3.csv")
```

### 4.1 Gênero

```{r}
grafico_1 <- data_final_2 |> 
  group_by(genero) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = genero)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_1.png", plot = grafico_1, width = 6, height = 6, dpi = 300)

grafico_2 <- data_final_2 |>
  filter(genero == "Homem") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_2.png", plot = grafico_2, width = 6, height = 6, dpi = 300)

grafico_3 <- data_final_2 |>
  filter(genero == "Mulher") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_3.png", plot = grafico_3, width = 6, height = 6, dpi = 300)
```

### 4.2 Idade

```{r}
idade <- data_final_2 |> 
  group_by(transicao) |> 
  summarise(media_idade = mean(idade),
            mediana_idade = median(idade))


grafico_4 <- data_final_2 |> 
  ggplot(aes(x = transicao, y = idade, fill = transicao)) + 
  geom_boxplot(outlier.color = "red") +
  theme_minimal() +
  labs(y = "Idade", fill = NULL) +  # remove título do eixo Y e legenda
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),  # remove os nomes das categorias no eixo X
    axis.title.x = element_blank()  # remove o título do eixo X (só pra garantir)
  )

#ggsave("grafico_4.png", plot = grafico_4, width = 6, height = 6, dpi = 300)

```

### 4.3 Raça

```{r}
grafico_5 <- data_final_2 |> 
  group_by(raça) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = raça)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_5.png", plot = grafico_5, width = 6, height = 6, dpi = 300)

grafico_6 <- data_final_2 |>
  filter(raça == "Branco") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_6.png", plot = grafico_6, width = 6, height = 6, dpi = 300)

grafico_7 <- data_final_2 |>
  filter(raça == "Não branco") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_7.png", plot = grafico_7, width = 6, height = 6, dpi = 300)
```

### 4.4 Tempo de desemprego

```{r}
tempo_desemprego_1 <- data_final_2 |> 
  group_by(transicao) |> 
  summarise(media = mean(tempo_desemprego),
            mediana = median(tempo_desemprego))


grafico_8 <- data_final_2 |> 
  ggplot(aes(x = transicao, y = tempo_desemprego, fill = transicao)) + 
  geom_boxplot(outlier.color = "red") +
  theme_minimal() +
  labs(y = "Meses de desemprego", fill = NULL) +  # remove título do eixo Y e legenda
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),  # remove os nomes das categorias no eixo X
    axis.title.x = element_blank()  # remove o título do eixo X (só pra garantir)
  )

#ggsave("grafico_8.png", plot = grafico_8, width = 6, height = 6, dpi = 300)

tempo_desemprego_2 <- data_final_2 |>
  filter(tempo_desemprego < 36) |> 
  group_by(transicao) |> 
  summarise(media = mean(tempo_desemprego),
            mediana = median(tempo_desemprego))


grafico_9 <- data_final_2 |> 
  filter(tempo_desemprego < 36) |> 
  ggplot(aes(x = transicao, y = tempo_desemprego, fill = transicao)) + 
  geom_boxplot(outlier.color = "red") +
  theme_minimal() +
  labs(y = "Meses de desemprego", fill = NULL) +  # remove título do eixo Y e legenda
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),  # remove os nomes das categorias no eixo X
    axis.title.x = element_blank()  # remove o título do eixo X (só pra garantir)
  )

#ggsave("grafico_9.png", plot = grafico_9, width = 6, height = 6, dpi = 300)

tempo_desemprego_3 <- data_final_2 |>
  filter(tempo_desemprego < 24) |> 
  group_by(transicao) |> 
  summarise(media = mean(tempo_desemprego),
            mediana = median(tempo_desemprego))


grafico_10 <- data_final_2 |> 
  filter(tempo_desemprego < 24) |> 
  ggplot(aes(x = transicao, y = tempo_desemprego, fill = transicao)) + 
  geom_boxplot(outlier.color = "red") +
  theme_minimal() +
  labs(y = "Meses de desemprego", fill = NULL) +  # remove título do eixo Y e legenda
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),  # remove os nomes das categorias no eixo X
    axis.title.x = element_blank()  # remove o título do eixo X (só pra garantir)
  )

ggsave("grafico_10.png", plot = grafico_10, width = 6, height = 6, dpi = 300)


```

### 4.5 Escolaridade

#### 4.5.1 Ensino médio

```{r}

grafico_11 <- data_final_2 |> 
  group_by(ensino_medio) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = ensino_medio)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_11.png", plot = grafico_11, width = 6, height = 6, dpi = 300)

grafico_12 <- data_final_2 |>
  filter(ensino_medio == "Ensino médio completo") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_12.png", plot = grafico_12, width = 6, height = 6, dpi = 300)

grafico_13 <- data_final_2 |>
  filter(ensino_medio == "Ensino médio incompleto") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

#ggsave("grafico_13.png", plot = grafico_13, width = 6, height = 6, dpi = 300)
```

Pelos resultados acima, a escolaridade, em termos de ensino médio, não apresenta diferença entre os que migraram para o setor privado ou trabalho por conta própria.

#### 4.5.2 Ensino superior

```{r}
grafico_11.2 <- data_final_2 |> 
  group_by(ensino_superior) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = ensino_superior)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_11.2.png", plot = grafico_11.2, width = 6, height = 6, dpi = 300)

grafico_12.2 <- data_final_2 |>
  filter(ensino_superior == "Superior completo") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_12.2.png", plot = grafico_12.2, width = 6, height = 6, dpi = 300)

grafico_13.2 <- data_final_2 |>
  filter(ensino_superior == "Sem superior completo") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_13.2.png", plot = grafico_13.2, width = 6, height = 6, dpi = 300)
```

#### 4.5.1 Anos de estudo

```{r}
anos_estudos <- data_final_2 |> 
  group_by(transicao) |> 
  summarise(media = mean(anos_estudos),
            mediana = median(anos_estudos))

grafico_4.5.1 <- data_final_2 |> 
  ggplot(aes(x = transicao, y = anos_estudos, fill = transicao)) + 
  geom_boxplot(outlier.color = "red") +
  theme_minimal() +
  labs(y = "Anos de estudo", fill = NULL) +  # remove título do eixo Y e legenda
  theme(
    legend.position = "bottom",
    axis.text.x = element_blank(),  # remove os nomes das categorias no eixo X
    axis.title.x = element_blank()  # remove o título do eixo X (só pra garantir)
  )

ggsave("grafico_4.5.1.png", plot = grafico_4.5.1, width = 6, height = 6, dpi = 300)


data_final_2 |> 
  ggplot(aes(x = anos_estudos, fill = transicao)) + 
  geom_density(alpha = 0.5) +
  facet_wrap(~ transicao, scales = "free_y") +
  theme_minimal() +
  labs(x = "Anos de estudos", y = "Densidade", fill = NULL) +
  theme(
    legend.position = "none"  # tira a legenda, já que vai ter facetas
  )
```

### 4.6 Posição familiar

```{r}
grafico_14 <- data_final_2 |> 
  group_by(posicao_familiar) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = posicao_familiar)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_14.png", plot = grafico_14, width = 10, height = 6, dpi = 300)

grafico_15 <- data_final_2 |>
  filter(posicao_familiar == "Responsável pelo domicílio") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_15.png", plot = grafico_15, width = 6, height = 6, dpi = 300)

grafico_16 <- data_final_2 |>
  filter(posicao_familiar == "Não responsável pelo domicílio") |> 
  group_by(transicao) |> 
  count() |> 
  ggplot(aes(x = "", y = n, fill = transicao)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  geom_text(
    aes(label = percent(n / sum(n))),
    position = position_stack(vjust = 0.5),
    color = "white", size = 10
  ) +
  scale_fill_brewer(palette = "Set2") +
  theme_void() +
  theme(legend.position = "bottom",
        legend.text = element_text(size = 16)) +
  labs(fill = NULL)

ggsave("grafico_16.png", plot = grafico_16, width = 6, height = 6, dpi = 300)
```

Pelos resultados acima, é possível ver que pessoas que são responsáveis tem maior representatividade na mobilidade de carreira para o trabalho por conta própria.

### 4.7 Renda após mobilidade

```{r}
data_final %>%
  group_by(transicao) %>%
  summarise(
    media = mean(renda_depois, na.rm = TRUE))
```

A renda habitual média após a transição é muito próxima entre os que migram para TCP e para o setor priado.
